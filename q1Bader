pipeline = [
    {
        '$lookup': {
            'from': 'customerAddresses', 
            'localField': 'addresstype.shippingAddressID', 
            'foreignField': '_id',  
            'as': 'addressDetails' 
        }
    },
    {
        '$match': {
            'name': 'John Doe'
        }
    },
    {
        '$project': {
            '_id': 0,
            'customerName': '$name',
            'longitude': '$addressDetails.longitude',
            'latitude': '$addressDetails.latitude',
        }
    }
]

# Execute the aggregation query
result = myDB.customers.aggregate(pipeline)

for doc in result:
    print(doc)
    longitude = doc.get('longitude')[0]
    latitude = doc.get('latitude')[0]  

location = [longitude, latitude]
print(location)
# Query to find the nearest driver
nearest_driver_cursor = myDB.partners.find(
    {
        "location": {
            "$near": {
                "$geometry": {
                    "type": "Point",
                    "coordinates": location  
                },
                "$maxDistance": 10000000000
            }
        },
                 "driverStatus.isActive": True,
                "driverStatus.onRoute": False
    },
    {"_id": 0, "driverName": 1, "location.latitude": 1}  
).limit(1)

for driver in nearest_driver_cursor:
    print(f"Nearest Driver: {driver['driverName']}, Latitude: {driver['location']['latitude']}")
# 2 notes: (1) make sure after finding nearest driver, to allocate the orderid to that driver, and in customers, 
    #allocate the driverid to deliveryPartner
# (2) After allocation, make sure OnRoute becomes false so that we can not allocate any other orders to him again
